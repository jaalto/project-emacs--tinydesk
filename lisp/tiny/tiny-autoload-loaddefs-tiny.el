;;; tiny-autoload-loaddefs-tiny.el -- loaddef definitions of program files
;;  Generate date: 2002-01-02
;;  This file is automatically generated. Do not Change.

(provide 'tiny-autoload-loaddefs-tiny)


;;;### (autoloads (tiny-setup-autoload-read tiny-setup-display tiny-setup-all
;;;;;;  tiny-setup) "tiny-setup" "tiny-setup.el" (15411 19366))
;;; Generated autoloads from tiny-setup.el

(autoload (quote tiny-setup) "tiny-setup" "\
Tiny Tools initial setup controller. See Message buffer for results.

Please make sure you have run the makefile.pl with build option
\"all\" or \"autoload\". You can verify this by finding files which
contain word \"loaddefs\".

Autoload statements are always defined when this function is called,
so even if you do not define any options to be installed, they will be
available in callable functions that trigger loading packages. This
means, that you an call e.g function \\[tinytab-mode] and the call
will trigger loading package tinytab.el

Please notice, that this central setup function configures only the
essential packages, even with TYPE and FEATURE-LIST. The listing
\\[tiny-setup-display] lists many packages that are not loaded
or set up in any default way because a) package's scope is very narrow
and it may not interest the majority b) there is no sensible autoload
and it requires manual settings: tinyload.el and tinypath.el are
good example of this. c) package is a library and it has been
taken cared of by other means.

Remember that all functions are autoloaded and accessible, although
packages marked <no options> may not have default configurations. Here is
sample listing that you may expect from \\[tiny-setup-display] which
displays then content of `tiny-setup-:option-table' when no tiny-setup
configure options are not defined and you should load the package as
instructed in the file itself:

    ..
    tinychist            <no options defined to install>
    ...
                         Command history save/restore utility.
    tinyload             <no options defined to install>
                         Load set of packages when Emacs is idle (lazy load).
    tinylock             <no options defined to install>
                         Simple emacs locking utility.
    ...
    tinynbr              <no options defined to install>
                         Number conversion minor mode oct/bin/hex.
    ...
    tinypath             <no options defined to install>
                         Manage Emacs startup dynamically.

Here is one way to install packages: a) configure paths automatically b)
load default setup and enable some extra features c) define
delayed loading for some packages that you use most of the time.

   (load \"/ABSOLUTE-PATH/tinypath.el\")

   ;;  Define \"ready to use packages\"

   (require 'tiny-setup)

   (tinypath-setup
     'all             ;; Activate default features safely
    '(tinyeat--bind   ;; plus features that you want
      tinydesk--bind
      tinydiff--bind
      tinydired--autoload
      tinyeat--bindforce
      ..))

   ;; Delayed loading of these packages, when Emacs goes idle.

   (setq tinyload-:load-list
     '(\"tinyadvice\"           ;; NOTE: for Emacs only.
       \"tinymy\"
       \"tinymail\"
       \"tinygnus\"
       \"tinyigrep\"
      ..))

  (require 'tinyload)

Here is yet another example. The `tiny-setup' function can configure
only the very basic features, so some defaults for packages
has been changed before they are loaded (look into each file
for interesting things that you may find).

    ;; First, configure some package MANUALLY

    (ti::add-hooks 'tinytf-:mode-define-keys-hook
                   '(tinytf-mode-define-keys tinytf-mode-define-f-keys))

    (setq tinymy-:define-key-force t)
    (setq tinyef-:mode-key \"\\C-cmr\")

    (setq tinylock-:auto-lock-interval1 45)     ;in minutes

    (setq tinyef-:mode-key-table
          '(
            (?[   . step-delete-back)           ;KEY -- action symbol
            (?]   . step-delete-fwd)
            (?*   . chunk-delete)
            (?;   . move-back)
            (?'   . move-fwd)
            (?~   . e-tilde)
            (?/   . e-slash)
            (?$   . e-dollar)))

    ;; After that, let the contral configure tool do the rest

    (require 'tiny-setup)

    (tiny-setup
     'all
     '(tinymy--bind-bindextra
       tinytab--bindforce-bindextra
       tinysearch--bindmousemeta
       tinyreplace--bindemacs
       tinyeat--bindforce))

The major TYPE of installation can be one of the following:

    'autoload

    Setup packages so that they are loaded when the options are needed,
    but do not define any key-bindings that already exist. This will
    bind free keys to trigger loading packages.

    'all

    Configure with all options on. This will affect free key-bindings.

    nil

    Autoload files are loaded (functions are ready for calling), but
    no defaults are configured unless OPTION-LIST is set.

Alternatively, you can select from OPTION-LIST what packages and what
options inside it will be installed. See list of packages and their
options with command \\[tiny-setup-display]

    The syntax for each package is the same and the symbol passed is
    composed from keywords:

        <package>--   Name of package affected, like `tinyeat--'.

        bind        Bind default keys. This will set package
                    to autoload state so that when the binding is called,
                    package gets loaded.

        bindforce   Overwrite any existing binding. This is like bind, but
                    without a check.

        bindemacs   Bind keys that are known to be occupied in Emacs.

        load        Load package. If you're tempted to use this,
                    use more efficient method described in tinyload.el.
                    Packages that have complex setup or which
                    can't be autoloaded easily are categorized as \"load\".

        autoload    Configure package so, that it will get loaded if option
                    related to package is needed.

    For example, to enable options in tinyadvice.el and tinyurl.el, you could
    send option list below. Notice that multiple options for a package
    are separated by single dashes.

        (require 'tiny-setup)
        (tinypath-setup 'all '(tinyadvice--load tinyurl--autoload-bind ...))
                                                |        |        |
                                                |        |        Option 2.
                                                |        Option 1.
                                                Package." t nil)

(autoload (quote tiny-setup-all) "tiny-setup" "\
Setup all tools with TYPE." t nil)

(autoload (quote tiny-setup-display) "tiny-setup" "\
List all packages and available setup options.
With Argument, like, \\[universal-argument], list NO-DESCRIPTIONS." t nil)

(autoload (quote tiny-setup-autoload-read) "tiny-setup" "\
Read all autoloads. Makefile must have been run for this to work.
Syntax in Tiny Tools kit bin/ directory: perl makefile.pl autoload." nil nil)

;;;***

;;;### (autoloads nil "tinyadvice" "tinyadvice.el" (15384 58070))
;;; Generated autoloads from tinyadvice.el
 (autoload 'tinyadvice-version "tinyadvice" "Display commentary." t)

;;;***

;;;### (autoloads (tinyappend-yank tinyappend-kill tinyappend-beg
;;;;;;  tinyappend-end) "tinyappend" "tinyappend.el" (15378 27670))
;;; Generated autoloads from tinyappend.el
 (autoload 'tinyappend-version "tinyappend" "Display commentary." t)

(autoload (quote tinyappend-end) "tinyappend" "\
Store region BEG END with MSG or current line to the end of `tinyappend-:buffer'." t nil)

(autoload (quote tinyappend-beg) "tinyappend" "\
Store BEG END with MSG or current line to the beginning of `tinyappend-:buffer'." t nil)

(autoload (quote tinyappend-kill) "tinyappend" "\
Kill `tinyappend-:buffer' buffer." t nil)

(autoload (quote tinyappend-yank) "tinyappend" "\
Yank `tinyappend-:buffer' to the current position. Optionally KILL `tinyappend-:buffer'." t nil)

;;;***

;;;### (autoloads (tinybookmark-mouse tinybookmark-keyboard tinybookmark-mouse-parse
;;;;;;  tinybookmark-keyboard-parse tinybookmark-parse tinybookmark-insert
;;;;;;  tinybookmark-repeat tinybookmark-forward tinybookmark-backward)
;;;;;;  "tinybookmark" "tinybookmark.el" (15378 27670))
;;; Generated autoloads from tinybookmark.el

(autoload (quote tinybookmark-backward) "tinybookmark" "\
Search book mark line backward." t nil)

(autoload (quote tinybookmark-forward) "tinybookmark" "\
Search book mark line forward or optionally BACK." t nil)

(autoload (quote tinybookmark-repeat) "tinybookmark" "\
Repeats character or string sequence STR COUNT times.

COUNT can be:

  0       repeat until position 79 or COL , or if the STR is not single
          character, until fits below COL
  \"\"    interactive insert, as long as user presses RET or SPACE.

STRICT has effect only if COL is given:

  nil     insert as long as STR fits below COL
  t       insert strictly up till COL and cut away portion
          of STR if necessary" t nil)

(autoload (quote tinybookmark-insert) "tinybookmark" "\
Add book mark until the end of line.
Normally line is filled as long as the pattern fits below max column,
but if the optional argument is given, it will be filled in _full_ ,
truncating if necessary. To see an example, try with some _long_
pattern.

Input:

  TXT       book mark name
  SEP       separator string that is repeated.
  STRICT
            0       strict is nil in spite of `tinybookmark-:insert-strict'
            1       strict is t   in spite of `tinybookmark-:insert-strict'
            nil     use default value in `tinybookmark-:insert-strict'

References:

        `tinybookmark-:insert-strict'" t nil)

(autoload (quote tinybookmark-parse) "tinybookmark" "\
Builds up book mark list and store it to cache.

Return:

  t     cache was built.
  nil   book marks not found or error happened. Cache untouched." t nil)

(autoload (quote tinybookmark-keyboard-parse) "tinybookmark" "\
Reparse book marks." nil nil)

(autoload (quote tinybookmark-mouse-parse) "tinybookmark" "\
Reparse book mark list. This function is called from mouse binding.
Called with mouse EVENT. VERB displays message." t nil)

(autoload (quote tinybookmark-keyboard) "tinybookmark" "\
Pass ARG to `tinybookmark-mouse'." t nil)

(autoload (quote tinybookmark-mouse) "tinybookmark" "\
Display book mark pop up menu. Use mouse EVENT.
Optional ARG
  list        \\[universal-argument], reparse list" t nil)

;;;***

;;;### (autoloads (tinybuffer-next-buffer tinybuffer-previous-buffer
;;;;;;  tinybuffer-iswitch-to-buffer) "tinybuffer" "tinybuffer.el"
;;;;;;  (15378 27670))
;;; Generated autoloads from tinybuffer.el
 (autoload 'tinybuffer-version "tinybuffer" "Display commentary." t)

(autoload (quote tinybuffer-iswitch-to-buffer) "tinybuffer" "\
Switch to buffer when RETURN/SPACE/TAB pressed.
Show buffer at echo area. ESC to cancel prompt.

Note:

  The startup time of calling this function may be high, because it has
  to build list of choices and possibly filter out unwanted buffers.

References:

  `tinybuffer-:iswitch-to-buffer-keys'    keys to scroll buffer list" t nil)

(autoload (quote tinybuffer-previous-buffer) "tinybuffer" "\
Switch to previous buffer in current window." t nil)

(autoload (quote tinybuffer-next-buffer) "tinybuffer" "\
Switch to the other buffer (2nd in list-buffer) in current window." t nil)

;;;***

;;;### (autoloads (tinycache-flush tinycache-flush-all-compilation
;;;;;;  tinycache-mode tinycache-buffer-list-mark-cache-off tinycache-buffer-list-mark-deleted
;;;;;;  tinycache-buffer-list-unmark tinycache-buffer-list-mark)
;;;;;;  "tinycache" "tinycache.el" (15378 27670))
;;; Generated autoloads from tinycache.el
 (autoload 'tinycache-version "tinycache" "Display commentary." t)

(autoload (quote tinycache-buffer-list-mark) "tinycache" "\
Mark Cached files in buffer list." t nil)

(autoload (quote tinycache-buffer-list-unmark) "tinycache" "\
Mark Cached files in buffer list." t nil)

(autoload (quote tinycache-buffer-list-mark-deleted) "tinycache" "\
Mark Cached files in buffer list." t nil)

(autoload (quote tinycache-buffer-list-mark-cache-off) "tinycache" "\
Mark files whose cache property has been turned off." t nil)

(autoload (quote tinycache-mode) "tinycache" "\
Toggle cache flag for this buffer with ARG.
If the file does not belong to compile cache, calling this function
does nothing. If the file is in the cache, the modeline displays mode name.

Removing the file from cache means that the file is not killed when
the cache is flushed with \\[tinycache-flush]." t nil)

(autoload (quote tinycache-flush-all-compilation) "tinycache" "\
Kill all cached files by stepping through all compilation buffers. VERB." t nil)

(autoload (quote tinycache-flush) "tinycache" "\
Kill buffers listed in `tinycache-:cache'. VERB.
You must be in the Compilation/Dired buffer to execute this command.

If you're not in dired buffer, function tries to find compilation
buffer and kill compilation cached files." t nil)

;;;***

;;;### (autoloads nil "tinychist" "tinychist.el" (15407 48240))
;;; Generated autoloads from tinychist.el
 (autoload 'tinychist-version "tinychist" "Display commentary." t)

;;;***

;;;### (autoloads (tinycomment-indent-for-comment) "tinycomment"
;;;;;;  "tinycomment.el" (15378 27670))
;;; Generated autoloads from tinycomment.el
 (autoload 'tinycomment-version "tinycomment" "Display commentary." t)

(autoload (quote tinycomment-indent-for-comment) "tinycomment" "\
Alternative to standard `indent-for-comment'.
Relies on file extension
and doesn't need specific mode to be turned on. Temporary buffers
that has no file name cannot be identified by this function, so
it passes control directly to mode. There is a chance you might not
even notice that this function is working on the background.

Verbose warnings are enabled by `tinycomment-:comment-notify'
Special cases are handled by tinycomment-:comment-extra* variables
Version info is on \\[tinycomment-version]." t nil)

;;;***

;;;### (autoloads nil "tinycompile" "tinycompile.el" (15378 27670))
;;; Generated autoloads from tinycompile.el
 (autoload 'tinycompile-version "tinycompile" "Display commentary." t)
 (autoload 'turn-on-tinycompile-mode    "tinycompile" "" t)
 (autoload 'turn-off-tinycompile-mode   "tinycompile" "" t)
 (autoload 'tinycompile-mode            "tinycompile" "" t)
 (autoload 'tinycompile-commentary        "tinycompile" "" t)

;;;***

;;;### (autoloads nil "tinydesk" "tinydesk.el" (15411 18780))
;;; Generated autoloads from tinydesk.el
 (autoload 'tinydesk-version "tinydesk" "Display commentary." t)

;;;***

;;;### (autoloads (tinydiff-diff tinydiff-diff-show-noask tinydiff-diff-show)
;;;;;;  "tinydiff" "tinydiff.el" (15407 48240))
;;; Generated autoloads from tinydiff.el
 (autoload 'tinydiff-version "tinydiff" "Display commentary." t)
 (autoload 'tinydiff-mode                "tinydiff" "" t)
 (autoload 'turn-on-tinydiff-mode  "tinydiff" "" t)
 (autoload 'turn-off-tinydiff-mode "tinydiff" "" t)
 (autoload 'tinydiff-commentary    "tinydiff" "" t)
 (autoload 'tinydiff-debug-toggle "tinydiff" "" t)

(autoload (quote tinydiff-diff-show) "tinydiff" "\
Generate diff CMD for the buffer and show it in the other window.
Lets user to edit option in the command line." t nil)

(autoload (quote tinydiff-diff-show-noask) "tinydiff" "\
Generate diff CMD for the buffer. Guess all parameters." t nil)

(autoload (quote tinydiff-diff) "tinydiff" "\
Run diff on buffer, possibly using rcsdiff if file is version controlled.
Inserts contents into register.

The version control is determined by searching RCS strings 'Id' or 'Log'

Input:

  CMD           diff command
  SHOW          show the results
  NO-ASK        run diff without asking any questions.
  VERB          enable verbose messages

References:

  `tinydiff-:extra-diff-program'
  `tinydiff-:diff-buffer'
  `tinydiff-:diff-options'

Return:

 nil            ,the no-ask parameter could not determine right diff.
 buffer         ,the shell output buffer. Note, that the diff may have
                 failed, in that case the buffer does not hold valid output." nil nil)

;;;***

;;;### (autoloads (tinydired-switch-to-some-ange-ftp-buffer tinydired-kill-all-ange-buffers
;;;;;;  tinydired-kill-all-ange-and-dired-buffers tinydired-kill-dired-and-ange-session
;;;;;;  tinydired-load-all-marked-files tinydired-refresh-view tinydired-mark-vc-files-in-Emacs
;;;;;;  tinydired-mark-today-files tinydired-pop-to-buffer tinydired-leave-only-lines
;;;;;;  tinydired-kill-lines tinydired-kill-unmarked-lines tinydired-last-file
;;;;;;  tinydired-first-file tinydired-first-line tinydired-pgdown
;;;;;;  tinydired-pgup tinydired-marks-restore tinydired-marks-save
;;;;;;  tinydired-shorten-links tinydired-lenghten-links tinydired-dired-do-shell-command
;;;;;;  tinydired-one-dir-up tinydired-marked-revert-files tinydired-mark-files-in-Emacs
;;;;;;  tinydired-read-dir-as-is tinydired-ediff tinydired-hook-control)
;;;;;;  "tinydired" "tinydired.el" (15378 27670))
;;; Generated autoloads from tinydired.el

(autoload (quote tinydired-hook-control) "tinydired" "\
Add hooks to dired mode. Optional REMOVE all hooks inserted by package." t nil)

(autoload (quote tinydired-ediff) "tinydired" "\
Compare file at point with file FILE using `ediff'.
FILE defaults to the file at the mark.
The prompted-for file is the first file given to `ediff'.
With prefix arg, prompt for second argument SWITCHES,
 which is options for `diff'." t nil)

(autoload (quote tinydired-read-dir-as-is) "tinydired" "\
Read the directory without any filtering." t nil)

(autoload (quote tinydired-mark-files-in-Emacs) "tinydired" "\
Mark all files in current directory that are in Emacs." t nil)

(autoload (quote tinydired-marked-revert-files) "tinydired" "\
Revert ie. replace files in Emacs with true copies in directory.
If ARG is non-nil, remove any marks if file was loaded.

Exceptions:
  Only reload files in Emacs whose modify flag is non-nil.
  If file does not exist in Emacs, do nothing." t nil)

(autoload (quote tinydired-one-dir-up) "tinydired" "\
Go up one directory." t nil)

(autoload (quote tinydired-dired-do-shell-command) "tinydired" "\
Like `dired-do-shell-command', but run running command in dired ange-ftp.
This is not remote shell, but instead it
transfers the file to your local system and then executes the dired
command on the file.

Remember: Every time you run this command this files are copied _blindly_
to your local directory. No file cache information is kept.

Input:

  COMMAND
  ARG

References:

  `tinydired-:tmp-dir'" t nil)

(autoload (quote tinydired-lenghten-links) "tinydired" "\
Opposite to `tinydired-shorten-links'.
This may take a while, because the whole directory structure must
be read again." t nil)

(autoload (quote tinydired-shorten-links) "tinydired" "\
Shortens all linked files. The link part is removed." t nil)

(autoload (quote tinydired-marks-save) "tinydired" "\
Save mark list to private storage.
Use this function if you know next operation will remove the marks.
You can get the marks back with `tinydired-marks-restore'." t nil)

(autoload (quote tinydired-marks-restore) "tinydired" "\
Restore mark list saved by `tinydired-marks-save'." t nil)

(autoload (quote tinydired-pgup) "tinydired" "\
Move cursor to _last_ file in dired mode." t nil)

(autoload (quote tinydired-pgdown) "tinydired" "\
Move cursor up." t nil)

(autoload (quote tinydired-first-line) "tinydired" "\
Move to first _line_ in dired." t nil)

(autoload (quote tinydired-first-file) "tinydired" "\
Move to first file in dired." t nil)

(autoload (quote tinydired-last-file) "tinydired" "\
Move to last file in dired." t nil)

(autoload (quote tinydired-kill-unmarked-lines) "tinydired" "\
Remove unmarked lines. Ignore directories and symlinks." t nil)

(autoload (quote tinydired-kill-lines) "tinydired" "\
Delete lines matching RE." t nil)

(autoload (quote tinydired-leave-only-lines) "tinydired" "\
Leave only lines matching RE. Directory lines are skipped.
You can easily undo this with reverting the buffer (dired \"g\")." t nil)

(autoload (quote tinydired-pop-to-buffer) "tinydired" "\
Pop to buffer if it exists in Emacs." t nil)

(autoload (quote tinydired-mark-today-files) "tinydired" "\
Mark all files, not dirs, that are created today.
Point sits on first today file. If no today's files are found, point stays
on current filename." t nil)

(autoload (quote tinydired-mark-vc-files-in-Emacs) "tinydired" "\
Mark all files in the current _view_ that are in Emacs _and_ in VC control.
Optionally UNMARK. VERB." t nil)

(autoload (quote tinydired-refresh-view) "tinydired" "\
Refresh current dired view.
If you have used `tinydired-leave-only-lines' and have done some changes to
the files. You can use this function to re-read the current view.

The dired \"g\" will load full view back. This instead caches the
current view, executes read, and deletes lines that weren't in the
cache --> you get refreshed view. All this may take a while...

Input:

 VERB       Verbose messages

Return:

 t              if refreshed
 nil" t nil)

(autoload (quote tinydired-load-all-marked-files) "tinydired" "\
Load all marked files into Emacs.
Does not load files which are already in Emacs.
If ARG is non-nil, remove mark if file was loaded. VERB." t nil)

(autoload (quote tinydired-kill-dired-and-ange-session) "tinydired" "\
Kill the current dired buffer and possible ange-ftp buffer. VERB.
This is like `dired-delete-and-exit'." t nil)

(autoload (quote tinydired-kill-all-ange-and-dired-buffers) "tinydired" "\
Kill all ange-ftp buffers _and_ all remote dired buffers. VERB." t nil)

(autoload (quote tinydired-kill-all-ange-buffers) "tinydired" "\
Kill all ange-ftp process buffers.
If you want to kill one buffer at a time, use
`tinydired-switch-to-some-ange-ftp-buffer' to switch to individual buffer
and use \\[kill-buffer] to kill session.

This function is primarily used for cleanups. After a while
you may end up with many ftp session and it's nice if
you can get rid of them fast.

Don't worry about the dired buffers, Ange will automatically
create connection, if you use \"g\" -- rever-buffer, in a dired
that is associated with ange-ftp." t nil)

(autoload (quote tinydired-switch-to-some-ange-ftp-buffer) "tinydired" "\
Gather all ange FTP buffers and offer completion menu.
If there is only one Ange buffer, switches to it without asking." t nil)

;;;***

;;;### (autoloads (tinyeat-eat tinyeat-delete-paragraph tinyeat-kill-buffer-lines
;;;;;;  tinyeat-kill-buffer-lines-min tinyeat-kill-line-back tinyeat-kill-line
;;;;;;  tinyeat-delete-whole-word tinyeat-join-lines tinyeat-forward-preserve
;;;;;;  tinyeat-forward tinyeat-backward-preserve tinyeat-backward
;;;;;;  tinyeat-zap-line tinyeat-erase-buffer) "tinyeat" "tinyeat.el"
;;;;;;  (15378 27672))
;;; Generated autoloads from tinyeat.el
 (autoload 'tinyeat-version "tinyeat" "Display commentary." t)
 (autoload 'tinyeat-debug-toggle "tinyeat" "" t)
 (autoload 'tinyeat-debug-show   "tinyeat" "" t)

(autoload (quote tinyeat-erase-buffer) "tinyeat" "\
Erase buffer." t nil)

(autoload (quote tinyeat-zap-line) "tinyeat" "\
Kill whole line, including the final newline." t nil)

(autoload (quote tinyeat-backward) "tinyeat" "\
Eat backward. See `tinyeat-eat'." t nil)

(autoload (quote tinyeat-backward-preserve) "tinyeat" "\
Eat forward, but handle spaces differently. See `tinyeat-eat'." t nil)

(autoload (quote tinyeat-forward) "tinyeat" "\
Eat forward. See `tinyeat-eat' function." t nil)

(autoload (quote tinyeat-forward-preserve) "tinyeat" "\
Eat forward, but handle spaces differently. See `tinyeat-eat'." t nil)

(autoload (quote tinyeat-join-lines) "tinyeat" "\
Join this and next line with one space, and go to the joint." t nil)

(autoload (quote tinyeat-delete-whole-word) "tinyeat" "\
Delete word at point. Cursor at whitespace, calls `fixup-whitespace'.

References:

  `tinyeat-:eat-full-word-charset'" t nil)

(autoload (quote tinyeat-kill-line) "tinyeat" "\
Same as `kill-line', except the killed text isn't put into cut buffer.
This way you can retain mouse selection in cut buffer.
This only interests people who can use mouse." t nil)

(autoload (quote tinyeat-kill-line-back) "tinyeat" "\
Like `kill-line' but backward." t nil)

(autoload (quote tinyeat-kill-buffer-lines-min) "tinyeat" "\
Kill until `point-min'. Optionally BACK." t nil)

(autoload (quote tinyeat-kill-buffer-lines) "tinyeat" "\
Kill to the `point-max' or BACK to the `point-min' with ARG." t nil)

(autoload (quote tinyeat-delete-paragraph) "tinyeat" "\
Delete current paragraph, separated by empty lines." t nil)

(autoload (quote tinyeat-eat) "tinyeat" "\
Eat *appropriate* text forward, if BACK then backward.

The optional SPACE-PRESERVE changes the space eating (VERB).

A.  when it is NIL and BACK is anything.   * marks the cursor.
         text1 text1        *     text2  text2
    -->  text1 text1 text2  text2                   ;one space left

B.  when it is NON-NIL and BACK nil
         text1 text1        *     text2  text2
    -->  text1 text1        *text2  text2            ;delete right spaces

C.  when it is NON-NIL and BACK t
         text1 text1        *     text2  text2
         text1 text1*     text2  text2               ;delete left spaces

References:

  `tinyeat-:non-word-chars'" t nil)

;;;***

;;;### (autoloads nil "tinyef" "tinyef.el" (15378 27672))
;;; Generated autoloads from tinyef.el
 (autoload 'tinyef-mode         "tinyef" "" t)
 (autoload 'turn-off-tinyef-mode        "tinyef" "" t)
 (autoload 'turn-on-tinyef-mode "tinyef" "" t)
 (autoload 'tinyef-commentary     "tinyef" "" t)
 (autoload 'tinyef-version        "tinyef" "" t)

;;;***

;;;### (autoloads (tinygnus-nslookup-save tinygnus-mark-deleted tinygnus-install)
;;;;;;  "tinygnus" "tinygnus.el" (15409 63832))
;;; Generated autoloads from tinygnus.el
 (autoload 'tinygnus-debug-toggle "tinygnus" "" t)
 (autoload 'tinygnus-debug-show   "tinygnus" "" t)
 (autoload 'tinygnus-version "tinygnus" "Display commentary." t)
 (autoload 'tinygnus-summary-install-mode        "tinygnus" "" t)
 (autoload 'tinygnus-summary-mode                "tinygnus" "" t)
 (autoload 'turn-on-tinygnus-summary-mode        "tinygnus" "" t)
 (autoload 'turn-off-tinygnus-summary-mode "tinygnus" "" t)
 (autoload 'tinygnus-summary-commentary    "tinygnus" "" t)
 (autoload 'tinygnus-summary-version       "tinygnus" "" t)
 (autoload 'tinygnus-group-install-mode   "tinygnus" "" t)
 (autoload 'tinygnus-group-mode         "tinygnus" "" t)
 (autoload 'turn-on-tinygnus-group-mode   "tinygnus" "" t)
 (autoload 'turn-off-tinygnus-group-mode  "tinygnus" "" t)
 (autoload 'tinygnus-group-commentary     "tinygnus" "" t)
 (autoload 'tinygnus-group-version        "tinygnus" "" t)

(autoload (quote tinygnus-install) "tinygnus" "\
Install package. Optionally UNINSTALL." t nil)

(autoload (quote tinygnus-mark-deleted) "tinygnus" "\
Mark current article expirable(mail) or deleted(news)." t nil)

(autoload (quote tinygnus-nslookup-save) "tinygnus" "\
READ or save `tinygnus-:nslookup-table' to `tinygnus-:nslookup-file'.
See function `tinygnus-article-ube-send-to-postmasters'." t nil)

;;;***

;;;### (autoloads (tinyhotlist-remove tinyhotlist-add tinyhotlist-control
;;;;;;  tinyhotlist-control-kbd tinyhotlist-load-hotlist tinyhotlist-save-hotlist)
;;;;;;  "tinyhotlist" "tinyhotlist.el" (15384 58070))
;;; Generated autoloads from tinyhotlist.el

(autoload (quote tinyhotlist-save-hotlist) "tinyhotlist" "\
Call `tinyhotlist-load-hotlist' with arg to save hotlist. ARGS are ignored." t nil)

(autoload (quote tinyhotlist-load-hotlist) "tinyhotlist" "\
Load or SAVE hotlist configuration from `tinyhotlist-:hotlist-file'.
When the hotlist file is loaded, only valid entries from there
are selected to `tinyhotlist-:cache': If File does not exist, it is dropped.

Return:

 nil t" t nil)

(autoload (quote tinyhotlist-control-kbd) "tinyhotlist" "\
Same as `tinyhotlist-control' with ARG, but you can call this from keyboard." t nil)

(autoload (quote tinyhotlist-control) "tinyhotlist" "\
Control center of hotlist. Use mouse EVENT to position popup.

Optional ARG can be:

  nil           show the hotlist
  0             kill all members from hotlist.
  9             kill all, but initalize with defaults.
  nbr           any number, add current active buffer to hotlist
  -             negative number, remove item from hotlist. Eg. hit \\[universal-argument]  -
  1 x \\[universal-argument]       remove current buffer from hotlist
  2 x \\[universal-argument]       Save hotlist
  3 x \\[universal-argument]       load hotlist." t nil)

(autoload (quote tinyhotlist-add) "tinyhotlist" "\
Add current buffer to hotlist." t nil)

(autoload (quote tinyhotlist-remove) "tinyhotlist" "\
Remove current buffer from hotlist." t nil)

;;;***

;;;### (autoloads (tinyigrep-menu) "tinyigrep" "tinyigrep.el" (15382
;;;;;;  22904))
;;; Generated autoloads from tinyigrep.el

(autoload (quote tinyigrep-menu) "tinyigrep" "\
Igrep command menu." t nil)

;;;***

;;;### (autoloads (tinyindent-mode tinyindent-tt-mode) "tinyindent"
;;;;;;  "tinyindent.el" (15378 27672))
;;; Generated autoloads from tinyindent.el
 (autoload 'tinyindent-version "tinyindent" "Display commentary." t)

(autoload (quote tinyindent-tt-mode) "tinyindent" "\
Toggle variable `tinyindent-tt-mode' with ARG. See description in `tinyindent-mode'." t nil)

(autoload (quote tinyindent-mode) "tinyindent" "\
Toggle relative indentation mode with ARG.

Indentation is determined according to previous lines. Special
indent happens only at the beginning of line, where user is asked if
he wants to have relative or \"hard\" indentation.

Abount function `tinyindent-tt-mode'

This isn't really mode. It just turns one flag on in `tinyindent-mode', so that
it behaves a little differently. If the `tinyindent-mode' is not running, it
wiil be turned on. turning off `tinyindent-tt-mode' _does_not_ end `tinyindent-mode'.

Sometimes you want to control between 'hard' tab and 'soft' tab, ie.
relative indent. This mode causes second character to be read after
tab key is hit. The following happens:

TAB TAB     inserts hard tab
TAB SPC     indent relative without inserting space char.
TAB x       indents relative and inserting character x

\\{tinyindent-:mode-map}" t nil)

;;;***

;;;### (autoloads (ti::compat-timer-control) "tinylib" "tinylib.el" (15411
;;;;;;  18540))
;;; Generated autoloads from tinylib.el

(autoload (quote ti::compat-timer-control) "tinylib" "\
With `run-at-time' TIME REPEAT FUNCTION keep or remove timer. VERB." nil nil)

;;;***

;;;### (autoloads (ti::ck-do ti::ck-debug-toggle) "tinylibck" "tinylibck.el"
;;;;;;  (15378 27672))
;;; Generated autoloads from tinylibck.el

(autoload (quote ti::ck-debug-toggle) "tinylibck" "\
Turn debug on or off with ARG. See buffer `ti::ck-:debug-buffer'." t nil)

(autoload (quote ti::ck-do) "tinylibck" "\
Transform key binding to XEmacs or Emacs in current environment.
on current emacs. This enables you to have same key binding file
for both emacs versions. You can write key bindings either in XEmacs
or Emacs style.

    In Emacs :  (ti::ck-do '(meta up)) --> [M-up]
    In XEmacs:  (ti::ck-do [M-up])     --> '(meta up)

This function does the conversion only if it needs to, and returns
immediately if no conversion is needed. This should minimise performance
penalty.

Input:
  KEY    key sequence
  XE     flag. If this is nil, then Emacs env. is assumed. However
         `ti::ck-:xemacs-flag' is obeyed if it is non-nil.
         If non-nil, then XEmacs env. is assumed and conversion to
         XEmacs like bindings are done." nil nil)

;;;***

;;;### (autoloads (ti::id-info) "tinylibid" "tinylibid.el" (15378
;;;;;;  27672))
;;; Generated autoloads from tinylibid.el

(autoload (quote ti::id-info) "tinylibid" "\
Try to identify buffer type.

Function doesn't rely on mode, because that doesn't necessarily tell what
the buffer holds. Many users still program their shell scripts in
`fundamental-mode' or so. This means that `major-mode' isn't checked,
because calling function can do it easily.

If this function returns nil, _then_ it's probably the time to check
the `major-mode'.

The normal order of evaluation is as follows:
-  First line in the file
-  Whole filename including path = `buffer-file-name'
-  File name extension
-  `buffer-name' is checked. [temporary buffer has no file name]
-  Whole buffer is searched for RE texts

Input:

  MODE              flag, controls return value format
  VARIABLE-LOOKUP   flag, read buffer type from cache. (From previous call)
  VERB              if non-nil, verbose messages allowed.

Return values:

  when optional MODE = nil
  Some appropriate _string_ that represents the content. notice that this
  string is usually generalised description, _but_ it the file has special
  1st line in form of -*-..-*- the string is direct mode name string.

  when optional MODE = non-nil
  Return possible mode name as _symbol_

  when VARIABLE is non-nil, the variable `ti::id-:info' is read instead.
  If it has non-nil value, the value is returned, otherwise full buffer
  is parsed again and variable's value is updated.

References:

  `ti::id-func-alist'  order of evaluation.
  `ti::id-:info'            buffer local variable updated during every call." t nil)

;;;***

;;;### (autoloads (ti::menu-menu ti::menu-set-doc-string ti::menu-add)
;;;;;;  "tinylibmenu" "tinylibmenu.el" (15378 27672))
;;; Generated autoloads from tinylibmenu.el

(autoload (quote ti::menu-add) "tinylibmenu" "\
Add to menu MENU-SYMBOL elt (CH . CELL). Optionally DELETE.

Example:

  (ti::menu-add 'ti::menu-:menu-sample ?2  nil 'delete)
  (ti::menu-add 'ti::menu-:menu-sample ?t '( (my-test 1 2 3)))

Return:

  nil       no add done due to existing CELL
            no remove due to non-existing CELL" nil nil)

(autoload (quote ti::menu-set-doc-string) "tinylibmenu" "\
Use  MENU-SYMBOL and set its DOC-STRING.

Example:

  (ti::menu-set-doc-string 'ti::menu-:menu-sample \"?=help, 1=test1, t=myTest\")" nil nil)

(autoload (quote ti::menu-menu) "tinylibmenu" "\
The menu navigation engine.

Input:

  MENU-SYMBOL           variable symbol containing menu items
  PFX-ARG               the prefix arg user ppossibly passed to menu

References:

  `ti::menu-:menu-sample'   Show how the menu is constructed.
  `ti::menu-:prefix-arg'    Copy of current prefix arg" nil nil)

;;;***

;;;### (autoloads (ti::text-mark-region ti::text-unmark-region ti::text-mouse-unmark-region
;;;;;;  ti::text-mouse-mark-region ti::text-re-search-backward ti::text-re-search-forward
;;;;;;  ti::text-buffer ti::text-looking-at ti::text-re-search) "tinylibt"
;;;;;;  "tinylibt.el" (15378 27672))
;;; Generated autoloads from tinylibt.el

(autoload (quote ti::text-re-search) "tinylibt" "\
Highlight found text with search face.

Note:

    The beginning of match and end of match will have
    property 'rear-nonsticky t, so that adding characters before of after
    text, won't inherit the face.

Input:

  RE            str  regexp
  DIRECTION     bool non-nil means backward
  LEVEL         nbr  which subexpression in re to highlight, default is 0
  MAXP          nbr  last search point [default until bob/eob]

  FACE          sym  face symbol
                     if symbol is 'null then set face to value nil
                     or if this is list; then it must be properly list
                     of format '(PROP PROP-VAL  PROP PROP-VAL ..)

  MODE          nbr  signify that function should highlight all matches
                     that occur within LEVEL..NBR
                     if you have lot's of xx(match)yy|zz(match)tt|
                     the subexpression are counted from left to to
                     right: 1,2 ...
  SAVE-UNDO     flag non-nil means that the highlight information is
                     recorded for undo. This flag in on if function is
                     called interactively. NOTE: the undo information is
                     saved only if something was matched.

Return:

 nil            No match
 nbr            start of match at LEVEL." nil nil)

(autoload (quote ti::text-looking-at) "tinylibt" "\
Highlight found RE at LEVEL with FACE-OR-PLIST.
The LEVEL is subexpression to highlight. PLIST means property list." t nil)

(autoload (quote ti::text-buffer) "tinylibt" "\
Highlight RE and sub LEVEL in whole buffer, starting from `point-min'.
Preserve point.

See `ti::text-re-search' for descriptions of FACE MODE and SAVE-UNDO." t nil)

(autoload (quote ti::text-re-search-forward) "tinylibt" "\
Search RE and highlight forward until `point-max'.
Optional prefix arg tells which subexpression LEVEL to match that
function should highlight. point is preserved during call.

See `ti::text-re-search' for descriptions of FACE MODE SAVE-UNDO." t nil)

(autoload (quote ti::text-re-search-backward) "tinylibt" "\
Search RE and highlight backward until `point-min'.
Optional prefix arg tells which subexpression LEVEL to match that
function should highlight. point is preserved during call.

See `ti::text-re-search' for descriptions of FACE MODE SAVE-UNDO." t nil)

(autoload (quote ti::text-mouse-mark-region) "tinylibt" "\
Highlight region BEG END. EVENT is mouse event." t nil)

(autoload (quote ti::text-mouse-unmark-region) "tinylibt" "\
Remove highlight from region BEG END. EVENT is mouse event." t nil)

(autoload (quote ti::text-unmark-region) "tinylibt" "\
Remove highlight from region BEG END." t nil)

(autoload (quote ti::text-mark-region) "tinylibt" "\
Highlight BEG END. With optional prefix arg REMOVE all matching FACE." t nil)

;;;***

;;;### (autoloads nil "tinylisp" "tinylisp.el" (15407 17982))
;;; Generated autoloads from tinylisp.el
 (autoload 'tinylisp-elp-summary-mode            "tinylisp" t t)
 (autoload 'turn-on-tinylisp-elp-summary-mode  "tinylisp" t t)
 (autoload 'turn-off-tinylisp-elp-summary-mode "tinylisp" t t)
 (autoload 'tinylisp-version "tinylisp" "Display commentary" t)

;;;***

;;;### (autoloads (tinyload-loader-process tinyload-install) "tinyload"
;;;;;;  "tinyload.el" (15378 27672))
;;; Generated autoloads from tinyload.el

(autoload (quote tinyload-install) "tinyload" "\
Install package or REMOVE.
This function removes any previous TinyLoad timer process and resets
the list pointer to 0." t nil)

(autoload (quote tinyload-loader-process) "tinyload" "\
Load packages defined in `tinyload-:load-list'.
If called interactively, FORCE loading all packages in the list." t nil)

;;;***

;;;### (autoloads (tinylock-lock tinylock-history) "tinylock" "tinylock.el"
;;;;;;  (15378 27674))
;;; Generated autoloads from tinylock.el
 (autoload 'tinylock-version "tinylock" "Display commentary." t)

(autoload (quote tinylock-history) "tinylock" "\
Displays login history. Optionally to given buffer BUFFER." t nil)

(autoload (quote tinylock-lock) "tinylock" "\
Lock Emacs with PSW password and MSG.
Message is displayed if LOCK-NOW is nil.
If LOCK-NOW is non-nil emacs is immediately locked with PSW." t nil)

;;;***

;;;### (autoloads (tinymacro-assign tinymacro-end-kbd-macro-and-assign)
;;;;;;  "tinymacro" "tinymacro.el" (15378 27674))
;;; Generated autoloads from tinymacro.el
 (autoload 'tinymacro-version "tinymacro" "Display commentary." t)

(autoload (quote tinymacro-end-kbd-macro-and-assign) "tinymacro" "\
Terminate reading macro and assign it to key." t nil)

(autoload (quote tinymacro-assign) "tinymacro" "\
Name last macro and assigns it to user defined KEY.
Runs tinymacro-:macro-assigned-hook if key macro gets installed.
The query options should be turned off if you call this within
function, since it always return nil if the options are on.

Input:

  KEY   Should be valid emacs key-bind-sequence/key-vector
  VERB  Boolean, verbose messages

Return:

  t    is assigned
  nil  not assigned `keyboard-quit'" t nil)

;;;***

;;;### (autoloads (tinymail-on-off-toggle tinymail-mail tinymail-deactivate-and-send-to-you)
;;;;;;  "tinymail" "tinymail.el" (15411 20732))
;;; Generated autoloads from tinymail.el
 (autoload 'tinymail-version "tinymail" "Display commentary." t)
 (autoload 'tinymail-mode                "tinymail" "" t)
 (autoload 'turn-on-tinymail-mode  "tinymail" "" t)
 (autoload 'turn-off-tinymail-mode "tinymail" "" t)
 (autoload 'tinymail-commentary    "tinymail" "" t)

(autoload (quote tinymail-deactivate-and-send-to-you) "tinymail" "\
Deactivate TIMI and change To field to point to your address.
This function is normally used when you use mailing lists. See
documentation in the tinymail.el or call \\[tinymail-version]." t nil)

(autoload (quote tinymail-mail) "tinymail" "\
Prepare mail mode.
Add or changes Cc, FF, X-Sender-Info fields on the fly while you're
composing the message.

Input:

  DISABLE       Disables package.
  VERB          print verbose message.

References:

  `tinymail-:feature-hook'." nil nil)

(autoload (quote tinymail-on-off-toggle) "tinymail" "\
Toggle TIMI mode on and off by Changing spacing of To field.
This affects automatic Cc and X-Sender-Info tracking.
ARG behaves  like mode argument.

Without arg, this toggless Cc tracking, with prefix argument,
it toggless both Cc and X-Sender-Info tracking." t nil)

;;;***

;;;### (autoloads (tinymailbox-message-to-file tinymailbox-message-to-folder
;;;;;;  tinymailbox-copy-body tinymailbox-copy tinymailbox-delete
;;;;;;  tinymailbox-begin) "tinymailbox" "tinymailbox.el" (15407
;;;;;;  48240))
;;; Generated autoloads from tinymailbox.el
 (autoload 'tinymailbox-version "tinymailbox" "Display commentary" t)
 (autoload 'tinymailbox-install-mode  "tinymailbox" "" t)
 (autoload 'tinymailbox-mode        "tinymailbox" "" t)
 (autoload 'turn-on-tinymailbox-mode  "tinymailbox" "" t)
 (autoload 'turn-off-tinymailbox-mode "tinymailbox" "" t)
 (autoload 'tinymailbox-commentary    "tinymailbox" "" t)
 (autoload 'tinymailbox-forward "tinymailbox" "Go to next message." t)
 (autoload 'tinymailbox-backward "tinymailbox" "Go to previous message." t)

(autoload (quote tinymailbox-begin) "tinymailbox" "\
Move to message begin. Optionally BACKWARD." t nil)

(autoload (quote tinymailbox-delete) "tinymailbox" "\
Delete current message. point must be inside message." t nil)

(autoload (quote tinymailbox-copy) "tinymailbox" "\
Copy current message. point must be inside message." t nil)

(autoload (quote tinymailbox-copy-body) "tinymailbox" "\
Copy body of current message. point must be inside message." t nil)

(autoload (quote tinymailbox-message-to-folder) "tinymailbox" "\
File current message by appending it to FILE." t nil)

(autoload (quote tinymailbox-message-to-file) "tinymailbox" nil t nil)

;;;***

;;;### (autoloads (tinymy-buffer-file-chmod tinymy-install tinymy-define-keys-extra
;;;;;;  tinymy-define-keys) "tinymy" "tinymy.el" (15407 17982))
;;; Generated autoloads from tinymy.el
 (autoload 'tinymy-version "tinymy" "Display commentary." t)

(autoload (quote tinymy-define-keys) "tinymy" "\
Install keys." t nil)

(autoload (quote tinymy-define-keys-extra) "tinymy" "\
Define extra global keys." t nil)
 (autoload  'tinymy-install-files "tinymy" "" t)

(autoload (quote tinymy-install) "tinymy" "\
Configures Emacs variables and bindings." t nil)

(autoload (quote tinymy-buffer-file-chmod) "tinymy" "\
Toggle current buffer's Read-Write permission permanently on disk. VERB.
Does nothing if buffer is not visiting a file or file is not owned by us." t nil)

;;;***

;;;### (autoloads nil "tinynbr" "tinynbr.el" (15381 6616))
;;; Generated autoloads from tinynbr.el
 (autoload 'tinynbr-version "tinynbr" "Display commentary." t)
 (autoload 'tinynbr-mode                "tinynbr" "" t)
 (autoload 'turn-on-tinynbr-mode        "tinynbr" "" t)
 (autoload 'tun-off-tinynbr-mode        "tinynbr" "" t)
 (autoload 'tinynbr-commentary    "tinynbr" "" t)
 (autoload 'tinynbr-int-to-hex  "tinynbr" "" t)
 (autoload 'tinynbr-int-to-oct  "tinynbr" "" t)
 (autoload 'tinynbr-int-to-bin  "tinynbr" "" t)
 (autoload 'tinynbr-hex-to-int  "tinynbr" "" t)
 (autoload 'tinynbr-oct-to-int  "tinynbr" "" t)
 (autoload 'tinynbr-bin-to-int  "tinynbr" "" t)

;;;***

;;;### (autoloads nil "tinypad" "tinypad.el" (15378 27674))
;;; Generated autoloads from tinypad.el
 (autoload 'tinypad-mode                "tinypad" "" t)
 (autoload 'turn-on-tinypad-mode        "tinypad" "" t)
 (autoload 'turn-off-tinypad-mode       "tinypad" "" t)
 (autoload 'tinypad-version "tinypad" "Display commentary." t)

;;;***

;;;### (autoloads (tinypage-go-next tinypage-go-previous tinypage-yank-after
;;;;;;  tinypage-yank-before tinypage-yank tinypage-cut tinypage-copy
;;;;;;  tinypage-select tinypage-region-action) "tinypage" "tinypage.el"
;;;;;;  (15378 27674))
;;; Generated autoloads from tinypage.el
 (autoload 'tinypage-version "tinypage" "Display commentary." t)
 (autoload 'tinypage-mode                "tinypage" "" t)
 (autoload 'turn-on-tinypage-mode  "tinypage" "" t)
 (autoload 'turn-off-tinypage-mode "tinypage" "" t)
 (autoload 'tinypage-commentary    "tinypage" "" t)

(autoload (quote tinypage-region-action) "tinypage" "\
Execute action ACT. Return t or nil. VERB." nil nil)

(autoload (quote tinypage-select) "tinypage" "\
Select page. If sitting on page Marker, use page below. VERB." t nil)

(autoload (quote tinypage-copy) "tinypage" "\
Select page. If sitting on page Marker, use page below. VERB." t nil)

(autoload (quote tinypage-cut) "tinypage" "\
Select page. If sitting on page Marker, use page below. VERB." t nil)

(autoload (quote tinypage-yank) "tinypage" "\
Yank page from register. VERB." t nil)

(autoload (quote tinypage-yank-before) "tinypage" "\
Yank page from register, but _before_ current page. VERB." t nil)

(autoload (quote tinypage-yank-after) "tinypage" "\
Yank page from register, but _after_ current page.
Optionally BEFORE with MSG and VERB." t nil)

(autoload (quote tinypage-go-previous) "tinypage" "\
Go to previous page. VERB." t nil)

(autoload (quote tinypage-go-next) "tinypage" "\
Go to next page, optionally BACK. Return point if moved. VERB." t nil)

;;;***

;;;### (autoloads nil "tinypair" "tinypair.el" (15384 58070))
;;; Generated autoloads from tinypair.el
 (autoload 'tinypair-version "tinypair" "Display commentary." t)
 (autoload 'tinypair-mode            "tinypair" "" t)
 (autoload 'turn-on-tinypair-mode    "tinypair" "" t)
 (autoload 'turn-off-tinypair-mode   "tinypair" "" t)
 (autoload 'tinypair-commentary      "tinypair" "" t)

;;;***

;;;### (autoloads (tinypath-report-mode) "tinypath" "tinypath.el"
;;;;;;  (15407 48240))
;;; Generated autoloads from tinypath.el

(autoload (quote tinypath-report-mode) "tinypath" "\
Major mode to help working with `tinypath-cache-duplicate-report'. VERB.

\\{tinypath-report-mode-map}" t nil)

;;;***

;;;### (autoloads (tinyperl-pod-grep-and-make-faq-answer tinyperl-pod-grep
;;;;;;  tinyperl-pod-by-manpage tinyperl-pod-find-file tinyperl-pod-by-module
;;;;;;  tinyperl-module-find-file tinyperl-perldoc tinyperl-pod-kill-buffers
;;;;;;  turn-on-tinyperl-mode-all-buffers tinyperl-install) "tinyperl"
;;;;;;  "tinyperl.el" (15407 48240))
;;; Generated autoloads from tinyperl.el
 (autoload 'tinyperl-version "tinyperl" "Display commentary." t)

(autoload (quote tinyperl-install) "tinyperl" "\
Install tinyperl.

Input:

  FORCE     If non-nil, rebuild all variables and
            save new `(tinyperl-cache-file-name)'.
            If nil, read saved variables from `(tinyperl-cache-file-name)'.

  VERB      Allow verbose messaegs." t nil)

(autoload (quote turn-on-tinyperl-mode-all-buffers) "tinyperl" "\
Turn function `tinyperl-mode' on in every perl buffer. Optionally turn OFF." t nil)
 (autoload 'tinyperl-mode           "tinyperl" ""       t)
 (autoload 'turn-on-tinyperl-mode   "tinyperl" ""       t)
 (autoload 'turn-off-tinyperl-mode  "tinyperl" ""       t)
 (autoload 'tinyperl-commentary     "tinyperl" "" t)
 (autoload 'tinyperl-pod-view-mode          "tinyperl" "" t)
 (autoload 'turn-on-tinyperl-pod-view-mode  "tinyperl" "" t)
 (autoload 'turn-off-tinyperl-pod-view-mode "tinyperl" "" t)
 (autoload 'tinyperl-pod-write-mode          "tinyperl" "" t)
 (autoload 'turn-on-tinyperl-pod-write-mode  "tinyperl" "" t)
 (autoload 'turn-off-tinyperl-pod-write-mode "tinyperl" "" t)

(autoload (quote tinyperl-pod-kill-buffers) "tinyperl" "\
Kill all temporary POD buffers." t nil)

(autoload (quote tinyperl-perldoc) "tinyperl" "\
Run perldoc with STRING. First try with -f then without it.
Show content in `tinyperl-:perldoc-buffer'. If buffer is visible in
some other frame, the cursor is not moved there. Only contents is updated.

The last used STRING is cached and if called next time with same
string, the shell command is not called unless FORCE is non-nil.

Input:

  STRING    Seach string
  FORCE     Force calling shell although answer cached
  VERB      flag, Allow verbose messages

References:

  `tinyperl-:perldoc-hook'" t nil)

(autoload (quote tinyperl-module-find-file) "tinyperl" "\
Load Perl MODULE source." t nil)

(autoload (quote tinyperl-pod-by-module) "tinyperl" "\
Show pod manual page for MODULE or load MODULE.

Input:

  MODULE    The Perl module as it appears in `use' statement,
            like Getopt::Long the '.pm' is automatically added.
  MODE      If non-nil, load source file, not pod." t nil)

(autoload (quote tinyperl-pod-find-file) "tinyperl" "\
Run pod2text on FILE and create new buffer: '*pod' + FILE + '*'.
If file contains pod documentation section, it will be formatted nicely." t nil)

(autoload (quote tinyperl-pod-by-manpage) "tinyperl" "\
Display pod for FILE." t nil)

(autoload (quote tinyperl-pod-grep) "tinyperl" "\
Grep REGEXP from perl pod files.
This is your way to find what pages contain references to the items you're
looking for. However if you select the file from compile buffer, it is
in the unconverted format (.pod). A better would be to momorize the
pod file name, like

   perlre.pod:165:    \\Z       Match at only e

And call immediately \\[tinyperl-pod-by-manpage] and view `perlre' in
more pleasant manner. Few C-s searches or \\[occur] will take you
to the correct position." t nil)

(autoload (quote tinyperl-pod-grep-and-make-faq-answer) "tinyperl" "\
Grep REGEXP from perl pod files.

This function also gathers all =head topics that match the REGEXP.
You can use generated page as an answer to 'Has this this question
been answered in FAQ'" t nil)

;;;***

;;;### (autoloads (tinypgp-hide-show-toggle tinypgp-xpgp-header-toggle
;;;;;;  tinypgp-xpgp-header-mode-toggle tinypgp-crypt-region tinypgp-crypt-mail
;;;;;;  tinypgp-decrypt-region tinypgp-decrypt-mail tinypgp-encrypt-region
;;;;;;  tinypgp-encrypt-region-sign tinypgp-encrypt-mail tinypgp-encrypt-mail-sign
;;;;;;  tinypgp-sign-region tinypgp-sign-mail tinypgp-sign-loose-info
;;;;;;  tinypgp-sign-mail-auto-mode) "tinypgp" "tinypgp.el" (15411
;;;;;;  18642))
;;; Generated autoloads from tinypgp.el
 (autoload 'tinypgp-newnym-req-acksend  "tinypgp" "" t)
 (autoload 'tinypgp-newnym-req-sigsend  "tinypgp" "" t)
 (autoload 'tinypgp-newnym-req-cryptrecv        "tinypgp" "" t)
 (autoload 'tinypgp-newnym-req-fixedsize        "tinypgp" "" t)
 (autoload 'tinypgp-newnym-req-disable  "tinypgp" "" t)
 (autoload 'tinypgp-newnym-req-fingerkey        "tinypgp" "" t)
 (autoload 'tinypgp-newnym-req-nobcc    "tinypgp" "" t)

(autoload (quote tinypgp-sign-mail-auto-mode) "tinypgp" "\
Toggle autosigning mode according to ARG.

Input:
  0, -1     off
  nil       toggle
  t, 1      on

  'push-on  Record previous value and turn on  auto signing.
  'push-off Record previous value and turn off auto signing.
  'pop      pop previous autosign value.

Return:
  nil       autosigning off
  non-nil   autosigning on" t nil)

(autoload (quote tinypgp-sign-loose-info) "tinypgp" "\
Loose signature info.
Input:
  VERB          Verbose messages." t nil)

(autoload (quote tinypgp-sign-mail) "tinypgp" "\
Sign message in mail buffer.

Input:

  REGISTER      flag, if non-bil store the signature to register.
                This is the prefix arg user passes to program.
                This will automatically turn off X-pgp.
  USER          key-id
  VERB          allow verbose messages
  NOXPGP        Prohibit X-Pgp

Notes:

  if VERB is non-nil (set in interactive call), the pubring is
  changed if it the information is on the cache." t nil)

(autoload (quote tinypgp-sign-region) "tinypgp" "\
Sign region.

Input:

  BEG END       ints, region
  VERB          flag, verbose messages
  OPTIONS       string, flags to add to the real pgp command.
  NOERR         flag, return nil or t only
  REGISTER      flag, save results to register
  AS-IS         flag, if non-nil. no buffer modification is done.
                Normally would delete whitespaces at the end of lines.
" t nil)

(autoload (quote tinypgp-encrypt-mail-sign) "tinypgp" "\
See `tinypgp-encrypt-mail'. Raise parameter 'sign'.
SINGLE-OR-LIST NO-REPLACE SIGN-PWD OPTIONS VERB NOERR." t nil)

(autoload (quote tinypgp-encrypt-mail) "tinypgp" "\
Encrypt mail buffer.

Input:

  SINGLE-OR-LIST    List of key-ids. Interactive call reads To,CC,BCC.
  NO-REPLACE        prefix arg, store result to `tinypgp-:register'.
  SIGN-FLAG         if non-nil, sign at the same time as you encrypt.
  OPTIONS           Additional pgp option string.
  VERB              If non-nil, verbose messages.
  NOERR             If non-nil, do not call error.

Function call note:

  [interactive]
  In case the EMAIL address you're sending doesn't have entry in your
  keyring, but you know that person has a PGP public key, then
  please remove the email address prior calling this function and
  it will prompt you a string to match for USER.

  If this function is called interactively, it tries to set right
  pubring by querying cache and other keyrings (user prompted)
  Also the `tinypgp-:pgp-exe-interactive-option' is suppressed if
  `tinypgp-:r-mode-indication-flag' is non-nil

  Normally the To field's address is read and used for encryption.
  However, if you are _on_ line that has email address in format
  <foo@site.com> then your are asked if you want to use this email
  instead. You can complete between this and To address.

  [when called as lisp function]
  Be sure to take precaution when passing OPTIONS if the message is
  sent to remailer. Any extra keyword, like 'Comment:'
  may reveal your identity.

  SINGLE-OR-LIST is not processed with `tinypgp-key-id-conversion'.
  You should call it manually if you want to respect user's
  substitution definitions.

  [Genenal note]
  If there are multiple recipiens in the To, CC, BCC field the
  last keyring in the `tinypgp-pubring-table' is used when doing the
  encryption.

Input:

  single-or-list    list of email addresses or KEY ID's
  no-replace        flag, do not replace area with encryption
  options           string, extra options passed to pgp exe
  verb              flag, allow printing messages." t nil)

(autoload (quote tinypgp-encrypt-region-sign) "tinypgp" "\
Same as `tinypgp-encrypt-region' but raise 'sign' parameter.
BEG END USER NO-REPLACE SIGN-PWD OPTIONS VERB" t nil)

(autoload (quote tinypgp-encrypt-region) "tinypgp" "\
Encrypt region.

Input:

  BEG END       region
  USER          key-id (possibly email) or list of keyIds.
  NO-REPLACE    prefix arg, store results to `tinypgp-:register'
  SIGN-PWD      if non-nil string, Sign at the same time as you encrypt.
  OPTIONS       Additional option string for PGP.
  VERB          If non-nil, Verbose messages." t nil)

(autoload (quote tinypgp-decrypt-mail) "tinypgp" "\
Decrypt mail buffer.
The PGP data in the buffer is detected by reading the CTB bits:
see pgpformat.doc in pgp documentation.

Input:

  NO-REPLACE    flag, prefix arg instructs to show the cotent in
                separate buffer. See refrerence note too.
                If this is 'preview and verb argument is nil-nil,
                then automatically show content is different buffer.

  TYPE          nil or \"pgp\" --> PGP encrypted
                \"base64\" --> base64 signed and
                \"conventional\" --> encrypted with conventional key.

  VERB          Verbose mode.

References:

  `tinypgp-:pgp-encrypted-p-function'
  `tinypgp-:decrypt-arg-interpretation'     for interactive calls
  `tinypgp-:pgp-decrypt-arg-function'     for interactive calls
  `tinypgp-:user-identity-table'" t nil)

(autoload (quote tinypgp-decrypt-region) "tinypgp" "\
Decrypt region. Signal error is there is no decrypt message.

Input:

  BEG END       int, region
  NO-REPLACE    flag, store contents to `tinypgp-:register'.
                If values is 'review and verb is non-nil, also display
                content in separate buffer. Calls `tinypgp-view-register'
  TYPE          string, Decrypt type: conventional, base64 or pgp
  VERB          flag, verbose messages" t nil)

(autoload (quote tinypgp-crypt-mail) "tinypgp" "\
Crypt mail buffer.

Input:

  PASSWORD      pass phrase
  NO-REPLACE    store contents to `tinypgp-:register'.
  COMMENT       Additional comment added
  VERB          verbose messages" t nil)

(autoload (quote tinypgp-crypt-region) "tinypgp" "\
Crypt region.

Input:

  BEG END       region
  PASSWORD      pass phrase
  NO-REPLACE    store contents to `tinypgp-:register'.
  COMMENT       The comment string.
  VERB          verbose messages" t nil)

(autoload (quote tinypgp-xpgp-header-mode-toggle) "tinypgp" "\
Toggle X-pgp header mode with ARG.

References
  `tinypgp-:header-sign-table'     ,this variable overrides the signing mode." t nil)

(autoload (quote tinypgp-xpgp-header-toggle) "tinypgp" "\
Togle moving signature FROM/TO headers." t nil)

(autoload (quote tinypgp-hide-show-toggle) "tinypgp" "\
Togle hiding and showing the PGP signature." t nil)

;;;***

;;;### (autoloads (turn-on-tinyprocmail-mode-all-buffers turn-off-tinyprocmail-mode-all-buffers)
;;;;;;  "tinyprocmail" "tinyprocmail.el" (15378 27674))
;;; Generated autoloads from tinyprocmail.el
 (autoload 'tinyprocmail-mode           "tinyprocmail" "" t)
 (autoload 'turn-on-tinyprocmail-mode   "tinyprocmail" "" t)
 (autoload 'turn-off-tinyprocmail-mode  "tinyprocmail" "" t)
 (autoload 'tinyprocmail-commentary     "tinyprocmail" "" t)
 (autoload 'tinyprocmail-version                "tinyprocmail" "" t)
 (autoload 'tinyprocmail-output-mode        "tinyprocmail" "" t)
 (autoload 'turn-on-tinyprocmail-output-mode  "tinyprocmail" "" t)
 (autoload 'turn-off-tinyprocmail-output-mode "tinyprocmail" "" t)
 (autoload 'tinyprocmail-install-files "tinyprocmail" t t)

(autoload (quote turn-off-tinyprocmail-mode-all-buffers) "tinyprocmail" "\
Call `turn-on-tinyprocmail-mode-all-buffers' with parameter `off'. VERB." t nil)

(autoload (quote turn-on-tinyprocmail-mode-all-buffers) "tinyprocmail" "\
Turn on or OFF function `tinyprocmail-mode' for all procmail buffers. VERB.
Procmail files start with `rc.' or end to `.rc' and file content
must match `^:0'." t nil)

;;;***

;;;### (autoloads (tinyreplace-latex-math-replace tinyreplace-latex-blk-replace
;;;;;;  tinyreplace-replace-forward tinyreplace-replace-region tinyreplace-replace-over-files-compile-buffer
;;;;;;  tinyreplace-symmetry-toggle tinyreplace-define-keys-compile-map
;;;;;;  tinyreplace-menu) "tinyreplace" "tinyreplace.el" (15382 22904))
;;; Generated autoloads from tinyreplace.el

(autoload (quote tinyreplace-menu) "tinyreplace" "\
Run `tinyreplace-:menu'." t nil)

(autoload (quote tinyreplace-define-keys-compile-map) "tinyreplace" "\
Define key bindings." t nil)

(autoload (quote tinyreplace-symmetry-toggle) "tinyreplace" "\
Toggle variable` tinyreplace-:symmetry' with ARG. VERB." t nil)

(autoload (quote tinyreplace-replace-over-files-compile-buffer) "tinyreplace" "\
Read all files forward in buffer that is in compile buffer format.
Perform replace over the found files. Checks Out files that are
RCS controlled if necessary.

Line format:

  /DIR/DIR/FILE: matched text

Input:

  See function `tinyreplace-replace-1'
  BEG END STR1 STR2 &OPTIONAL FUNC VERB" t nil)

(autoload (quote tinyreplace-replace-region) "tinyreplace" "\
In region BEG END, find STR1 and replace with STR2." t nil)

(autoload (quote tinyreplace-replace-forward) "tinyreplace" "\
Find STR1 and replace with STR2 from current point forward.
See source code of function `tinyreplace-args-keymap-create' what key bindings
you can use. Normally C - l yanks, and \"\\\" key deletes line." t nil)

(autoload (quote tinyreplace-latex-blk-replace) "tinyreplace" "\
Select latex block areas for replace.

Input:

 STR1 STR2      Find and replace with.
 BLK            Block delimiter to find
 BEG-RE END-RE  Region bound regexps." t nil)

(autoload (quote tinyreplace-latex-math-replace) "tinyreplace" "\
Find STR1 and replace with STR2 inside latex math blocks." t nil)

;;;***

;;;### (autoloads (tinyrmail-rmail-summary-by-labels-and) "tinyrmail"
;;;;;;  "tinyrmail.el" (15378 27676))
;;; Generated autoloads from tinyrmail.el
 (autoload 'tinyrmail-version "tinyrmail" "Display commentary." t)
 (autoload 'tinyrmail-install-files "tinyrmail" t t)

(autoload (quote tinyrmail-rmail-summary-by-labels-and) "tinyrmail" "\
Display a summary of all messages with one or more LABELS.
LABELS should be a string containing the desired labels, separated by commas.
This summary is prduced by _ANDING_ the labels." t nil)

;;;***

;;;### (autoloads (tinyscroll-control tinyscroll-list tinyscroll-timer-process-control)
;;;;;;  "tinyscroll" "tinyscroll.el" (15411 18598))
;;; Generated autoloads from tinyscroll.el
 (autoload 'tinyscroll-version "tinyscroll" "Commentary." t)

(autoload (quote tinyscroll-timer-process-control) "tinyscroll" "\
Keep the auto scroll process and timer process alive.
Optionally DELETE auto scroll process. VERB." t nil)

(autoload (quote tinyscroll-list) "tinyscroll" "\
Show list of active auto scroll buffers.
Buffers are listed inecho-area if they fit there, otherwise in separate buffer.

If optional PRINT flag is non-nil, always generate report to temporary buffer.
If list if empty, do nothing.

Return:

 t      report generated to temporary buffer
 nil    no report" t nil)

(autoload (quote tinyscroll-control) "tinyscroll" "\
Turn on auto scroll on/off for current buffer.
If this command is called from `tinyscroll-:tmp-buffer' then the current
word in the line is read and offered for default buffer name.

Input:

  BUFFER-OR-POINTER     buffer to scroll
  OFF                   flag, prefix arg; is non-nil turn scrolling off
  VERB                  flag, allow verbose messages." t nil)

;;;***

;;;### (autoloads (tinysearch-search-word-backward tinysearch-search-word-forward
;;;;;;  ) "tinysearch" "tinysearch.el"
;;;;;;  (15382 30960))
;;; Generated autoloads from tinysearch.el

(autoload (quote tinysearch-search-word-forward) "tinysearch" "\
Search word at point forward." t nil)

(autoload (quote tinysearch-search-word-backward) "tinysearch" "\
Search word at point backward." t nil)

;;;***

;;;### (autoloads (tinytab-return-key-mode tinytab-tab-del-key tinytab-tab-key)
;;;;;;  "tinytab" "tinytab.el" (15378 27676))
;;; Generated autoloads from tinytab.el
 (autoload 'tinytab-mode                        "tinytab" "" t)
 (autoload 'turn-on-tinytab-mode                "tinytab" "" t)
 (autoload 'turn-off-tinytab-mode               "tinytab" "" t)
 (autoload 'tinytab-commentary          "tinytab" "" t)
 (autoload 'tinytab-version             "tinytab" "" t)

(autoload (quote tinytab-tab-key) "tinytab" "\
Main function for TAB key. See variable `tinytab-:tab-insert-hook'." t nil)

(autoload (quote tinytab-tab-del-key) "tinytab" "\
Main function for TAB key. See variable `tinytab-:tab-delete-hook'." t nil)

(autoload (quote tinytab-return-key-mode) "tinytab" "\
Toggle auto indent MODE / regular newline mode. VERB." t nil)

;;;***

;;;### (autoloads (tinytag-post-command tinytag-main-mouse tinytag-main
;;;;;;  tinytag-install-sample-database-c tinytag-install-sample-database-java
;;;;;;  tinytag-install) "tinytag" "tinytag.el" (15411 18378))
;;; Generated autoloads from tinytag.el

(autoload (quote tinytag-install) "tinytag" "\
Install package. Optionally UNINSTALL." t nil)

(autoload (quote tinytag-install-sample-database-java) "tinytag" "\
Install Java database from Sub JDK documentation." t nil)

(autoload (quote tinytag-install-sample-database-c) "tinytag" "\
Install c/C++ database from file tintytag.el." t nil)

(autoload (quote tinytag-main) "tinytag" "\
Run `tinytag-:try-hook' until some of the functions return non-nil." t nil)

(autoload (quote tinytag-main-mouse) "tinytag" "\
See `tinytag-main'. Function is called with mouse EVENT." t nil)

(autoload (quote tinytag-post-command) "tinytag" "\
Activates only if `tinytag-:set-database-hook' wakes up.
Show the database definition for the current word under point.

References:

  `tinytag-:noerror'
  `tinytag-:post-command-hook-wakeup'
  `tinytag-:set-database-hook'" nil nil)

;;;***

;;;### (autoloads (turn-on-tinytf-mode-maybe tinytf-mode-define-f-keys)
;;;;;;  "tinytf" "tinytf.el" (15411 20766))
;;; Generated autoloads from tinytf.el
 (autoload 'tinytf-version "tinytf" "Display commentary." t)
 (autoload 'tinytf-install-mode     "tinytf" "" t)
 (autoload 'tinytf-mode             "tinytf" "" t)
 (autoload 'turn-on-tinytf-mode     "tinytf" "" t)
 (autoload 'turn-off-tinytf-mode            "tinytf" "" t)
 (autoload 'tinytf-commentary         "tinytf" "" t)

(autoload (quote tinytf-mode-define-f-keys) "tinytf" "\
Define default F key to `tinytf-:mode-map'." t nil)
 (autoload 'tinytf-install-files "tinytf" t t)

(autoload (quote turn-on-tinytf-mode-maybe) "tinytf" "\
Turn on mode function `tinytf-mode' if TOC entry is found." nil nil)

;;;***

;;;### (autoloads (tinyurl-install tinyurl-mode-1 turn-on-tinyurl-mode-mail
;;;;;;  turn-on-tinyurl-mode-1-maybe turn-on-turn-off-tinyurl-mode-1-maybe)
;;;;;;  "tinyurl" "tinyurl.el" (15380 59900))
;;; Generated autoloads from tinyurl.el
 (autoload 'tinyurl-version "tinyurl" "Display commentary." t)
 (autoload 'tinyurl-debug-toggle "tinyurl" "" t)
 (autoload 'tinyurl-mode                  "tinyurl" "" t)
 (autoload 'turn-on-tinyurl-mode    "tinyurl" "" t)
 (autoload 'turn-off-tinyurl-mode   "tinyurl" "" t)
 (autoload 'tinyurl-commentary      "tinyurl" "" t)

(autoload (quote turn-on-turn-off-tinyurl-mode-1-maybe) "tinyurl" "\
Activate or Deactivate `tinyurl-mode-1' in current buffer.
Try to find ftp, http or email is found.
The value of `tinyurl-:exclude-function' is consulted first." nil nil)

(autoload (quote turn-on-tinyurl-mode-1-maybe) "tinyurl" "\
Activate `tinyurl-mode-1' in current buffer if ftp, http or email is found.
This function is meant to be used in eg. Article display
hooks in Mail Agents.

References:

  The value of `tinyurl-:exclude-function' is consulted first." nil nil)

(autoload (quote turn-on-tinyurl-mode-mail) "tinyurl" "\
Turn on  `tinyurl-mode-1' and make `tinyurl-:mouse-yank-at-point' local." nil nil)

(autoload (quote tinyurl-mode-1) "tinyurl" "\
Turn mode on or off with mode ARG for current buffer only.
If you want to turn on or off globally, use function `tinyurl-mode'." t nil)

(autoload (quote tinyurl-install) "tinyurl" "\
Install or `UNINSTALL package." t nil)

;;;***

;;;### (autoloads nil "tinyvc" "tinyvc.el" (15378 27676))
;;; Generated autoloads from tinyvc.el
 (autoload 'tinyvc-mode        "tinyvc" "" t)
 (autoload 'turn-on-tinyvc-mode  "tinyvc" "" t)
 (autoload 'turn-off-tinyvc-mode "tinyvc" "" t)
 (autoload 'tinyvc-commentary    "tinyvc" "" t)
 (autoload 'tinyvc-version       "tinyvc" "" t)

;;;***

;;;### (autoloads (tinyxreg-jump-to-register-mouse tinyxreg-jump-to-register
;;;;;;  tinyxreg-remove-register tinyxreg-point-to-register tinyxreg-point-to-register-mouse
;;;;;;  tinyxreg-trash tinyxreg-remove-reg) "tinyxreg" "tinyxreg.el"
;;;;;;  (15378 27676))
;;; Generated autoloads from tinyxreg.el
 (autoload 'tinyxreg-version "tinyxreg" "Display commentary." t)

(autoload (quote tinyxreg-remove-reg) "tinyxreg" "\
Remove register CHAR from stored window and point lists.
ARG suggests looking in window list." t nil)

(autoload (quote tinyxreg-trash) "tinyxreg" "\
Empties both window and point caches." t nil)

(autoload (quote tinyxreg-point-to-register-mouse) "tinyxreg" "\
Call `tinyxreg-point-to-register' using mouse EVENT." t nil)

(autoload (quote tinyxreg-point-to-register) "tinyxreg" "\
Store point to CHAR and to X-popup list.
With prefix ARG, store current frame configuration. VERBOSE enables
message printing.

Use \\[tinyxreg-point-to-register]  to go to that location or restore the
configuration." t nil)

(autoload (quote tinyxreg-remove-register) "tinyxreg" "\
Remove register from popup list.
See `tinyxreg-jump-to-register-mouse' for more." t nil)

(autoload (quote tinyxreg-jump-to-register) "tinyxreg" "\
Call `tinyxreg-jump-to-register-mouse' with REMOVE." t nil)

(autoload (quote tinyxreg-jump-to-register-mouse) "tinyxreg" "\
Displays list of registers using mouse EVENT.
Restore register or optionally REMOVE register from X-list.
Input:

  EVENT     mouse event
  REMOVE    flag, if non-nil, remove register.
  VERB      flag, Allow verbose messages." t nil)

;;;***
