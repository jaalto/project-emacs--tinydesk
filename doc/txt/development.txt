Table Of Contents

       1.0 Tiny Tools Project Introduction
           1.1 Audience
           1.2 Making releases
           1.3 Reporting  problems
           1.4 Downloading sources for editing
           1.6 Project web page locations
           1.7 Project documentation

       2.0 Development environment setup information
           2.1 CVS and Win32 development - getting Cygwin
           2.2 Setting up OpenSSH
           2.3  SSH access
           2.5 Bash admin files
           Debian packages

1.0 Tiny Tools Project Introduction

        #T2HTML-TITLE Emacs Tiny Tools information for developers
	#T2HTML-METAKEYWORDS Emacs, Emacs Lisp, Tiny Tools Documentation
        #T2HTML-OPTION --css-code-bg
        #T2HTML-OPTION --css-code-note
        #T2HTML-OPTION Note:
        #T2HTML-OPTION --html-frame

        Copyright 1995-2007 Jari Aalto

        License: This material may be distributed only subject to the
        terms and conditions set forth in GNU General Public License
        v2 or later; or, at your option, distributed under the terms
        of GNU Free Documentation License version 1.2 or later (GNU
        FDL).

    1.1 Audience

        This paper documents the usage of development repository
        account to a possible follower of the tiny-tools project or to
        a new project member who wishes to participate in development.
    1.2 Making releases

        To make a new file releases, follow these steps. We
        suppose that the file where the complete release is named as
        `tiny-tools-YYYY.MMDD.zip' following the ISO 8601 date
        standard and the universal de facto file packaging standard
        PACKAGENAME-VERSION.VERSION[.VERSION]*

        o   Upload the file to project page.
            PLEASE DO THIS FIRST - YOU WILL PICK FILE LATER.
        o   Login in to your account
        o   Go to project page
        o   Select page "Admin" => "File Releases" from the menus at top
        o   Scroll to the end where you see "File Release Packages"
        o   Select "Add Release" button.
            Fill in "Create new release" with the timestamp YYYY.MMDD.
            Select "Create this release".

        New page opens:

        o   Step 1: Fill in the description to "Release notes"
            Click the button "submit/refresh"
        o   Step 2: Select tiny-tools-YYYY.MMDD.zip
            Click button "add Files and/or Refresh View"
        o   Step 3:
            Processor => Platform independent
            file Type => Source .gz
            Click button "update/refresh"
        o   Step 4: Send message to people monitoring the package.

        RETURN by pressing button "Summary" at the beginning of page.

    1.3 Reporting  problems

        File a bug report with:

        o   Login as administrator of project
        o   Select "Contact support"
        o   Select text button "Support manager"
        o   Select "Submit a request"

    1.4 Downloading sources for editing

        You need SSH and CVS tools installed in your hard disk.
            To develop under Win32, see Cygwin http://www.cygwin.com/ => See
            link at the right hand corner and download `setup.exe' to your
            hard disk and start the program.

    1.5 Project web page locations

        At project server, web sites are located under /home/groups
        Project FTP Sites are located in
        /home/groups/ftp/pub/p/pr/ROJECT-NAME

            /home/users   : User Based Quota 2MB Soft 4MB Hard
            /home/groups  : Group Based Quota 100MB Soft 125MB Hard

    1.6 Project documentation

        Visit the project main page <project website>/PROJECT-NAME
        (make sure you have logged in) and select from the left hand
        list *project* *admin*. You arrive to the new page, Scroll to
        the bottom to "Tool Admin" and go to *DocManagerAdmin* and
        fill in the project documentation. BEFORE anything else, you
        must define a document group like _General_.

2.0 Development environment setup information

    2.1 CVS and Win32 development - getting Cygwin

        If you plan to develop code in Win32 platform, the easiest thing
        that you can do is to get CVS distribution from
        http://www.cygwin.com/ See link to the "setup.exe" program and
        download it. Cygwin's CVS is bets, because it track all the time
        the current CVS development and you can automatically update the
        latest CVS version by running the install again (It only fetches
        the newest packages)

        o   _Download_ *setup.exe* to your local hard drive.
        o   Run *setup.exe* from your local disk by double clicking it.
        o   Select "Download from Internet" ie. load the files to your local
            disk first.
        o   Direct "local Package Directory" to e.g c:\unix\cygwin-install
        o   You probably can use "Direct connection" for dial-up.
        o   The download will start and _finish_
        o   Start the *setup.exe* AGAIN and now install the packages to,
            say c:\unix\cygwin

        After Cygwin install, you want to add couple of paths to your
        PATH environment variable. In Win9x you modify c:\autoexec.bat
        and reboot. In WinME/NT/w2k you modify
        Control Panel/System/Environment/Variables.

            set CYGWIN_ROOT_DIR=c:\unix\cygwin
            set PATH=%CYGWIN_ROOT_DIR%\bin;%PATH%
            set PATH=%CYGWIN_ROOT_DIR%\usr\local\bin;%PATH%
            set PATH=%CYGWIN_ROOT_DIR%\sbin;%PATH%

    2.2 Setting up OpenSSH

          For Unix, get SSH from <http://www.openssh.org/>. OpenSSH is
          already include in the Win32/Cygwin.

        Using SSH is not the most straight forward thing, especially with
        all the protocol version numbers involved. You can easily go wrong or
        wonder why things are not working. Here are some basic instructions
        for OpenSSH, which is different form all other ssh version out
        there. Cygwin includes OpenSSH.

            $ ssh -V        # display ssh version

        Generate two keys, the SSH1 key first:

            $ ssh-keygen    # Proceed as the command suggests

        Then the SSH2 key:

            $ ssh-keygen -f ~/.ssh/id_dsa -t dsa

        Configure SSH by editing ~/.ssh/config, the protocol line is
        very important.

            Host *
                Protocol                    1,2
                UsePrivilegedPort           no
                Compression                 yes
                CompressionLevel            9
                KeepAlive                   yes
                RhostsAuthentication        yes
                RSAAuthentication           yes
                PubkeyAuthentication        yes
                PasswordAuthentication      yes
                FallBackToRsh               yes
                ForwardX11                  yes
                ForwardAgent                yes

        For Win32, you're set. But if this is Unix, you need to set
        file and directory permission to correct values as well. SSH is
        very picky and won't work correctly if it thinks that the
        permissions are too loose.

            $ chmod 700 ~/.ssh
            $ chmod 600 ~/.ssh/identity* ~/.ssh/config ~/.ssh/id_dsa*

        Final thing, to connect a remote site, you have to CARRY the key
        there. The keys that you will copy to remote site are the SSH1 and
        SSH2 keys you just generated. The files are:

            From (A) site               Copy to (B) site
            ~/.ssh/identity.pub         ~/.ssh/known_hosts
            ~/.ssh/id_dsa.pub           ~/.ssh/id_dsa_A_site.pub

        Again, remember to set chmod 600 permission in remote (B) site.
        Now you should be all set to be ready to connect to remote site.
        One final thing, always run all programs under agent, which
        remembers and passes forward your keys (ssh1 and aah2):

            $ ssh-add ~/.ssh/identity ~/.ssh/id_dsa

        After that you can connect to remote site without password, because
        agent makes the hand shake for your with your keys. Run *verbose*
        mode on to pinpoint any troubles with the connection:

            $ ssh -l LOGIN shell.<project site>

        If that works, you can expect that the CVS works without
        password under ssh-agent for your project (REMEMBER: you have
        to send the ~/.ssh/identity.pub through WWW-user-admin page,
        described earlier in this document for CVS to work)

    2.3 SSH access

        Copy SSH1 protocol key:

             ~/.ssh/identity.pub

        This is the file you must copy to your account.

            Log into server
            Navigate to "Account options"
            => Scroll to the end of page
            => {Edit Keys] => copy/paste content of identity.pub

        You must wait for the account to see the key (some hours) and
        after that, try to login to your SF shell:

            ssh -l login@project-host

        If that succeeds, you know that the identity.pub file was uploaded
        correctly to server.

    2.4 Bash admin files

        Under `bin/admin.bashrc' there is administrative file that
        automates project tasks. Follow the instruction in the file
        how to install and how to use the administrative command. In
        short, you should set up few variables and just "import" the
        file to your $HOME/.bashrc with:

            # $HOME/.bashrc

            ...set variables and call...

            source path-to-the-cvstree-directory/tiny-tools/bin/admin.bashrc

            # End of file

    2.5 Debian packages


        First, become a debian developer by reading this document
        http://www.debian.org/doc/developers-reference/index.en.html

        The initial debian package skeleton was generated with following manner

            <download the latest release>
            $ mv tiny-NNNN.NNNN emacs-tiny-tools-NNNN.NNNN
            $ cd emacs-tiny-tools-NNNN.NNNN
            $ export DEBFULLNAME="Firstname Surname"
            $ dh_make --single --email EMAIL --copyright gpl

End
